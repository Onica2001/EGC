{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.0",
    "title" : "CSU Suceava",
    "description" : "API of the CSU Suceava website"
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/DANIELAONICA/CSU_Suceava/1.0.0"
  } ],
  "tags" : [ {
    "name" : "jucatori",
    "description" : "Operations for players content"
  }, {
    "name" : "meciuri",
    "description" : "Operations for matches content"
  }, {
    "name" : "clasament",
    "description" : "Operations for leaderbord content"
  }, {
    "name" : "stiri",
    "description" : "Operations for news content"
  }, {
    "name" : "media",
    "description" : "Operations for media content"
  }, {
    "name" : "user",
    "description" : "Operations about the user's account"
  }, {
    "name" : "admin",
    "description" : "Operations of an admin account"
  }, {
    "name" : "sponsori",
    "description" : "Operations for sponsors content"
  } ],
  "paths" : {
    "/jucatori" : {
      "get" : {
        "tags" : [ "jucatori" ],
        "summary" : "Get All Players",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Jucator"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "jucatori" ],
        "summary" : "Create a Player",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Jucator"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Player created successfully"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/jucatori/{JucatorID}" : {
      "parameters" : [ {
        "name" : "JucatorID",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "jucatori" ],
        "summary" : "Get a Player by ID",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Jucator"
                }
              }
            }
          },
          "404" : {
            "description" : "Player not found"
          }
        }
      },
      "put" : {
        "tags" : [ "jucatori" ],
        "summary" : "Update a Player by ID",
        "parameters" : [ {
          "name" : "JucatorID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Jucator"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Player updated successfully"
          },
          "400" : {
            "description" : "Bad request"
          },
          "404" : {
            "description" : "Player not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "jucatori" ],
        "summary" : "Delete a Player by ID",
        "parameters" : [ {
          "name" : "JucatorID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Player deleted successfully"
          },
          "404" : {
            "description" : "Player not found"
          }
        }
      }
    },
    "/news" : {
      "get" : {
        "tags" : [ "stiri" ],
        "summary" : "Get All News",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/NewsItem"
                    }, {
                      "properties" : {
                        "Media" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/MediaItem"
                          }
                        }
                      }
                    } ]
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "stiri" ],
        "summary" : "Create a News Article",
        "description" : "Only the \"Creator de continut\" and \"Administrator\" have access to this function",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewsItem"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "News Article created successfully"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/news/{StireID}" : {
      "parameters" : [ {
        "name" : "StireID",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "stiri" ],
        "summary" : "Get a News Article by ID",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/NewsItem"
                  }, {
                    "properties" : {
                      "Media" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/MediaItem"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "News Article not found"
          }
        }
      },
      "put" : {
        "tags" : [ "stiri" ],
        "summary" : "Update a News Article by ID",
        "parameters" : [ {
          "name" : "StireID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewsItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "News Article updated successfully"
          },
          "400" : {
            "description" : "Bad request"
          },
          "404" : {
            "description" : "News Article not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "stiri" ],
        "summary" : "Delete a News Article by ID",
        "parameters" : [ {
          "name" : "StireID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "News Article deleted successfully"
          },
          "404" : {
            "description" : "News Article not found"
          }
        }
      }
    },
    "/media" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Get All Media",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MediaItem"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Upload Media for a News Article",
        "requestBody" : {
          "required" : true,
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediaUpload"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Media uploaded successfully"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/media/{MediaID}" : {
      "parameters" : [ {
        "name" : "MediaID",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Get Media by ID",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediaItem"
                }
              }
            }
          },
          "404" : {
            "description" : "Media not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "media" ],
        "summary" : "Delete Media by ID",
        "parameters" : [ {
          "name" : "MediaID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Media deleted successfully"
          },
          "404" : {
            "description" : "Media not found"
          }
        }
      }
    },
    "/user/signup" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates a normal user account",
        "description" : "Everybody has access to this option. The created account is only a generic account.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "User information for account creation",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCreateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "User account created successfully"
          },
          "400" : {
            "description" : "Invalid request or user account already exists"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs the user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginResponse"
                }
              }
            },
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "Calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/{username}/resetpassword" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Reset user password",
        "operationId" : "UserResetPassword",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The username of the account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "description" : "The new password for the account in clear text",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "User information for password reset",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/admin/accounts" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Lists all of the user accounts",
        "operationId" : "listUserAccounts",
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/admin/{username}/update" : {
      "put" : {
        "tags" : [ "admin" ],
        "summary" : "Update an user account",
        "operationId" : "UpdateAccount",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The username of the account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "usertype",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "User information for account update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserUpdateType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/admin/{username}/resetpassword" : {
      "put" : {
        "tags" : [ "admin" ],
        "summary" : "Reset an users password",
        "operationId" : "AdminResetPassword",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The username of the account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "description" : "The new password for the account in clear text",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "User information for password reset",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/admin/{username}/delete" : {
      "delete" : {
        "tags" : [ "admin" ],
        "summary" : "Delete an user account",
        "operationId" : "DeleteAccount",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The username of the account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/sponsori" : {
      "get" : {
        "tags" : [ "sponsori" ],
        "summary" : "Get All Sponsors",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SponsorGet"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "sponsori" ],
        "summary" : "Create a Sponsor",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SponsorResponse"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Sponsor created successfully"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/sponsori/{SponsorID}" : {
      "parameters" : [ {
        "name" : "SponsorID",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "sponsori" ],
        "summary" : "Get a Sponsor by ID",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SponsorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Sponsor not found"
          }
        }
      },
      "put" : {
        "tags" : [ "sponsori" ],
        "summary" : "Update a Sponsor by ID",
        "parameters" : [ {
          "name" : "SponsorID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SponsorResponse"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Sponsor updated successfully"
          },
          "404" : {
            "description" : "Sponsor not found"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "sponsori" ],
        "summary" : "Delete a Sponsor by ID",
        "parameters" : [ {
          "name" : "SponsorID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Sponsor deleted successfully"
          },
          "404" : {
            "description" : "Sponsor not found"
          }
        }
      }
    },
    "/meciuri" : {
      "get" : {
        "tags" : [ "meciuri" ],
        "summary" : "Get All Matches",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MeciResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "meciuri" ],
        "summary" : "Create a Match",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeciGet"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Match created successfully"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/meciuri/{MeciID}" : {
      "parameters" : [ {
        "name" : "MeciID",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "meciuri" ],
        "summary" : "Get a Match by ID",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeciGet"
                }
              }
            }
          },
          "404" : {
            "description" : "Match not found"
          }
        }
      },
      "put" : {
        "tags" : [ "meciuri" ],
        "summary" : "Update a Match by ID",
        "parameters" : [ {
          "name" : "MeciID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeciGet"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Match updated successfully"
          },
          "404" : {
            "description" : "Match not found"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "meciuri" ],
        "summary" : "Delete a Match by ID",
        "parameters" : [ {
          "name" : "MeciID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Match deleted successfully"
          },
          "404" : {
            "description" : "Match not found"
          }
        }
      }
    },
    "/clasament" : {
      "get" : {
        "tags" : [ "clasament" ],
        "summary" : "Get the leaderbord",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Clasament"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "LoginResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          }
        }
      },
      "UserCreateRequest" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The username for the new user",
            "example" : "sorin.lungu@test.com"
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the new user",
            "example" : "12345"
          },
          "usertype" : {
            "type" : "string",
            "description" : "Will always be normal",
            "example" : "Normal"
          }
        }
      },
      "UserUpdateType" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The username for the new user",
            "example" : "sorin.lungu@test.com"
          },
          "usertype" : {
            "type" : "string",
            "description" : "The type of the user's account",
            "example" : "Creator de continut"
          }
        }
      },
      "ResetPassword" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The username of the user",
            "example" : "sorin.lungu@test.com"
          },
          "password" : {
            "type" : "string",
            "description" : "The new password for the account in clear text",
            "example" : "12345"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The username of the account",
            "example" : "sorin.lungu@test.com"
          },
          "usertype" : {
            "type" : "string",
            "description" : "The type of the account of the user",
            "example" : "Creator de continut"
          }
        }
      },
      "UserAccountsResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/User"
        }
      },
      "NewsItem" : {
        "type" : "object",
        "properties" : {
          "DataPublicarii" : {
            "type" : "string",
            "format" : "date"
          },
          "Titlu" : {
            "type" : "string",
            "maxLength" : 120
          },
          "Continut" : {
            "type" : "string"
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "MediaItem" : {
        "type" : "object",
        "properties" : {
          "TipMedia" : {
            "type" : "string",
            "maxLength" : 10
          },
          "Cale" : {
            "type" : "string",
            "maxLength" : 255
          },
          "StireID" : {
            "type" : "integer"
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "MediaUpload" : {
        "type" : "object",
        "properties" : {
          "TipMedia" : {
            "type" : "string",
            "maxLength" : 10
          },
          "Cale" : {
            "type" : "string",
            "maxLength" : 255
          },
          "StireID" : {
            "type" : "integer"
          }
        }
      },
      "Jucator" : {
        "type" : "object",
        "properties" : {
          "Nume" : {
            "type" : "string",
            "maxLength" : 50
          },
          "Prenume" : {
            "type" : "string",
            "maxLength" : 50
          },
          "Pozitie" : {
            "type" : "string",
            "maxLength" : 50
          },
          "Numar" : {
            "type" : "integer"
          },
          "DataNasterii" : {
            "type" : "string",
            "format" : "date"
          },
          "Nationalitate" : {
            "type" : "string",
            "maxLength" : 50
          },
          "CaleImagine" : {
            "type" : "string",
            "maxLength" : 255
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "SponsorGet" : {
        "type" : "object",
        "properties" : {
          "SponsorID" : {
            "type" : "integer",
            "format" : "int64"
          },
          "CaleImagine" : {
            "type" : "string",
            "maxLength" : 255
          },
          "NumeComplet" : {
            "type" : "string",
            "maxLength" : 100
          },
          "LinkSiteExtern" : {
            "type" : "string",
            "format" : "uri"
          },
          "Editia" : {
            "type" : "string",
            "maxLength" : 100
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "SponsorResponse" : {
        "type" : "object",
        "properties" : {
          "CaleImagine" : {
            "type" : "string",
            "maxLength" : 255
          },
          "NumeComplet" : {
            "type" : "string",
            "maxLength" : 100
          },
          "LinkSiteExtern" : {
            "type" : "string",
            "format" : "uri"
          },
          "Editia" : {
            "type" : "string",
            "maxLength" : 100
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "MeciResponse" : {
        "type" : "object",
        "properties" : {
          "MeciID" : {
            "type" : "integer",
            "format" : "int64"
          },
          "DataMeci" : {
            "type" : "string",
            "format" : "date"
          },
          "EchipaID" : {
            "type" : "integer"
          },
          "AdversarID" : {
            "type" : "integer"
          },
          "Locatie" : {
            "type" : "string",
            "maxLength" : 100
          },
          "ScorEchipa" : {
            "type" : "integer"
          },
          "ScorAdversar" : {
            "type" : "integer"
          },
          "Editia" : {
            "type" : "string",
            "maxLength" : 50
          },
          "TipCampionat" : {
            "type" : "string",
            "maxLength" : 50
          },
          "LinkMeci" : {
            "type" : "string",
            "format" : "uri"
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "MeciGet" : {
        "type" : "object",
        "properties" : {
          "DataMeci" : {
            "type" : "string",
            "format" : "date"
          },
          "EchipaID" : {
            "type" : "integer"
          },
          "AdversarID" : {
            "type" : "integer"
          },
          "Locatie" : {
            "type" : "string",
            "maxLength" : 100
          },
          "ScorEchipa" : {
            "type" : "integer"
          },
          "ScorAdversar" : {
            "type" : "integer"
          },
          "Editia" : {
            "type" : "string",
            "maxLength" : 50
          },
          "TipCampionat" : {
            "type" : "string",
            "maxLength" : 50
          },
          "LinkMeci" : {
            "type" : "string",
            "format" : "uri"
          },
          "IsDeleted" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "Clasament" : {
        "type" : "object",
        "properties" : {
          "Pos" : {
            "type" : "integer"
          },
          "NumeEchipa" : {
            "type" : "string"
          },
          "Meciuri" : {
            "type" : "integer"
          },
          "Victorii" : {
            "type" : "integer"
          },
          "Egaluri" : {
            "type" : "integer"
          },
          "Infrangeri" : {
            "type" : "integer"
          },
          "GoluriMarcate" : {
            "type" : "integer"
          },
          "GoluriPrimite" : {
            "type" : "integer"
          },
          "DiferentaGoluri" : {
            "type" : "integer"
          },
          "VictoriiAcasa" : {
            "type" : "integer"
          },
          "EgaluriAcasa" : {
            "type" : "integer"
          },
          "VictoriiDeplasare" : {
            "type" : "integer"
          },
          "EgaluriDeplasare" : {
            "type" : "integer"
          },
          "PuncteAcasa" : {
            "type" : "integer"
          },
          "PuncteDeplasare" : {
            "type" : "integer"
          },
          "Puncte" : {
            "type" : "integer"
          }
        }
      }
    }
  }
}